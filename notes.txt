made some mods to Joystick.c, trying to use timer thats separate from main clock, by accessing mem mapped IO directly.
    seeing negative results, unclear why.

    had to build .hex on wsl, and flash on mac.
    BUT IN FUTURE JUST BUILD AND FLASH ON MAC YOU FOOL


next:
    timing info in timing.txt
    figure out clock dev on ard, get time between buffer receptions.
    send time diffs back over serial (printf("U"), etc)
    make conclusion that joystick.c vs pyserial being the problem...


Order physical converter cable.

Thinking about 8 frame delay between presentation and frame where we see acting.
how to make pyserial perform with less latency?
    http://www.brainboxes.com/faq/items/what-is-rts--cts-hardware-flow-control-
    https://forum.pjrc.com/archive/index.php/t-36163.html
    https://forum.pjrc.com/archive/index.php/t-36163.html
    https://forum.pjrc.com/archive/index.php/t-36163.html

We should verify that serial is the issue by doing an end-to-end test of camera frame gets read to when it gets to right before serial (unix time stamp)
We should make sure that we're not getting out-of-date camera images (make sure old images get dropped)


acts on 8th frame.


python3 tetris_ai_eyes.py -o | ./main r i 3 6 999999999 12 d | sudo python3 ../switch-controller/bridge.py

CMD /c 'python tetris_ai_eyes.py -o | main.exe r i 3 6 999999999 12 d | python ../switch-controller/bridge.py'
CMD /c 'Get-Content input.txt | python ../switch-controller/bridge.py'
CMD /c 'python ../switch-controller/bridge.py'


CMD /c 'main.exe w 0 3 6 999999999 12 e'
./main.exe w 0 3 6 999999999 12 e

CMD /c
Measure-Command { ./main.exe w 0 3 6 99 12 e }

https://my.eng.utah.edu/~cs5789/2010/slides/Interruptsx2.pdf


https://github.com/malcom/AVR-Tick-Counter

https://ww1.microchip.com/downloads/en/DeviceDoc/doc7799.pdf

clock division is probably almost certainly wrong.

another concern is thinking about how the clock works now, start/stop safety, and when we start counting vs when we should start counting

if it stutters, it's probably disk

============


View sticky notes on mac for stutter time stamps.

Normally, according to OpenShot video replay, we go from presented frame to a frame where we have moved in ~30ms.
But occasionally, it takes ~200ms.
    Eyes and brain are not to blame, even though brain took 10ms instead of ~1ms.
Look at sutter.mp4 and stutter_debug.mp4

STUTTER IS due to low hard drive space.


Not a solution, but another thought: Make c++ limit even lower? to 5ms?

System Wide
    Go faster
    hesitation due to poor pruning is terrible for time.

Eyes
    Improve queue framework: 3 things: current stable, last stable, raw frame.
    What was this? - Too slow? Look at replay right after a hold?
    read() from another thread?
    Better star ignoring?

Brain
    Iterative DFS
    With the new pruning, does he play the same game?
    More preemption?
    Time limit appears to not work.

Hands
    Timing instead of poll count?
    4 poll count for down, 2 poll count for neutral.
    dynamically change cycle count


============================================================

Decisions decisions:
    ./main w 123 4 6 100 1
    no differences in play with length=6, auto length = 3, growth thresh=2
    plays same game, but 4.6268420551x less comparisons on average


=====
my gpu could hold 8e9 / 280 state objects. ~ 28.5 million
sizeof(State) = 280

could reduce to 272 --> ~29.4 million
could reduce to 264 --> ~30.3 million


=====
4 deep, pruning: ~94k comparisons per turn
4 deep, no pruning: 1.8e6 comparisons per turn.

=====


for HDMI config: switch's screen size is 96%
Run using while cwd is joycontrol.
    sudo python3

python3 tetris_ai_eyes.py --config hdmi_coords.config | ./main r i 4 6 999999999999 12 | sudo python3 ../switch-controller/bridge.py

Accurate random block generation model greatly improved play.
    +1 tetris percent
    never die

Remember
non-static reference members cause copy/move operations to be implicitly deleted.
List initializer interpretation
numeric limits...
    min() vs lowest()

Improved performance
    Using generators
    Not using the heap.

====

Not ref(move(*op_child)) because the return type of move is already an rvalue reference, more specifically:

remove_reference<T>::type&&

    workers.push_back(thread{
        &get_best_foreseeable_state_from_subtree,
        move(*op_child),
        ref(results),
        ref(results_mutex)
    });

/*
mutex: Exclusive access. Assuming everyone CAN be a writer.
shared_mutex: Non-exclusive access. Differentiates between readers and writers

unique_lock: Lock as a writer. Usable on mutex and shared_mutex.
shared_lock: Lock as a reader only. Usable on shared_mutex.
*/

python3 ../TetrisAI/tetris_ai_eyes.py --config ../TetrisAI/hdmi_coords.config | ../TetrisAI/main r i 4 6 999999999999 12 | sudo python3 run_controller_cli.py PRO_CONTROLLER




Installing on windows 10 (powershell, assuming python3 and pip are installed)
    pip install opencv-python
    pip install sdl2
    pip install pysdl2
    pip install pysdl2-dll
    pip install pyserial


clock division stuff
    https://www.nongnu.org/avr-libc/user-manual/group__avr__power.html
    https://ww1.microchip.com/downloads/en/devicedoc/atmel-7766-8-bit-avr-atmega16u4-32u4_datasheet.pdf









